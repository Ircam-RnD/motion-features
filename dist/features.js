"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
var features = {

	//======================== constants ========================//

	accIntensityParam1: 0.8,
	accIntensityParam2: 0.1,

	freefallAccThresh: 0.15,
	freefallGyrThresh: 750,
	freefallGyrDeltaThresh: 40,

	gyrIntensityParam1: 0.9,
	gyrIntensityParam2: 1,

	kickThresh: 0.01,
	kickSpeedGate: 200,
	kickMedianFiltersize: 9,

	shakeThresh: 0.1,
	shakeWindowSize: 200,
	shakeSlideFactor: 10,

	spinThresh: 200,

	stillThresh: 5000,
	stillSlideFactor: 5,

	//======================== functions ========================//

	delta: function delta(prev, next, dt) {
		return (next - prev) / (2 * dt);
	},
	intensity1D: function intensity1D(nextX, prevX, prevIntensity, param1, param2, dt) {
		var dx = this.delta(nextX, prevX, dt); //(nextX - prevX) / (2 * dt);
		return param2 * dx * dx + param1 * prevIntensity;
	},
	magnitude3D: function magnitude3D(xyzArray) {
		return Math.sqrt(xyzArray[0] * xyzArray[0] + xyzArray[1] * xyzArray[1] + xyzArray[2] * xyzArray[2]);
	},
	lcm: function lcm(a, b) {
		var a1 = a,
		    b1 = b;

		while (a1 != b1) {
			if (a1 < b1) {
				a1 += a;
			} else {
				b1 += b;
			}
		}

		return a1;
	},
	slide: function slide(prevSlide, currentVal, slideFactor) {
		return prevSlide + (currentVal - prevSlide) / slideFactor;
	},
	stillCrossProduct: function stillCrossProduct(xyzArray) {
		return (xyzArray[1] - xyzArray[2]) * (xyzArray[1] - xyzArray[2]) + (xyzArray[0] - xyzArray[1]) * (xyzArray[0] - xyzArray[1]) + (xyzArray[2] - xyzArray[0]) * (xyzArray[2] - xyzArray[0]);
	}
};

exports.default = features;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZlYXR1cmVzLmpzIl0sIm5hbWVzIjpbImZlYXR1cmVzIiwiYWNjSW50ZW5zaXR5UGFyYW0xIiwiYWNjSW50ZW5zaXR5UGFyYW0yIiwiZnJlZWZhbGxBY2NUaHJlc2giLCJmcmVlZmFsbEd5clRocmVzaCIsImZyZWVmYWxsR3lyRGVsdGFUaHJlc2giLCJneXJJbnRlbnNpdHlQYXJhbTEiLCJneXJJbnRlbnNpdHlQYXJhbTIiLCJraWNrVGhyZXNoIiwia2lja1NwZWVkR2F0ZSIsImtpY2tNZWRpYW5GaWx0ZXJzaXplIiwic2hha2VUaHJlc2giLCJzaGFrZVdpbmRvd1NpemUiLCJzaGFrZVNsaWRlRmFjdG9yIiwic3BpblRocmVzaCIsInN0aWxsVGhyZXNoIiwic3RpbGxTbGlkZUZhY3RvciIsImRlbHRhIiwicHJldiIsIm5leHQiLCJkdCIsImludGVuc2l0eTFEIiwibmV4dFgiLCJwcmV2WCIsInByZXZJbnRlbnNpdHkiLCJwYXJhbTEiLCJwYXJhbTIiLCJkeCIsIm1hZ25pdHVkZTNEIiwieHl6QXJyYXkiLCJNYXRoIiwic3FydCIsImxjbSIsImEiLCJiIiwiYTEiLCJiMSIsInNsaWRlIiwicHJldlNsaWRlIiwiY3VycmVudFZhbCIsInNsaWRlRmFjdG9yIiwic3RpbGxDcm9zc1Byb2R1Y3QiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBTUEsV0FBVzs7QUFFaEI7O0FBRUFDLHFCQUFvQixHQUpKO0FBS2hCQyxxQkFBb0IsR0FMSjs7QUFPaEJDLG9CQUFtQixJQVBIO0FBUWhCQyxvQkFBbUIsR0FSSDtBQVNoQkMseUJBQXdCLEVBVFI7O0FBV2hCQyxxQkFBb0IsR0FYSjtBQVloQkMscUJBQW9CLENBWko7O0FBY2hCQyxhQUFZLElBZEk7QUFlaEJDLGdCQUFlLEdBZkM7QUFnQmhCQyx1QkFBc0IsQ0FoQk47O0FBa0JoQkMsY0FBYSxHQWxCRztBQW1CaEJDLGtCQUFpQixHQW5CRDtBQW9CaEJDLG1CQUFrQixFQXBCRjs7QUFzQmhCQyxhQUFZLEdBdEJJOztBQXdCaEJDLGNBQWEsSUF4Qkc7QUF5QmhCQyxtQkFBa0IsQ0F6QkY7O0FBMkJoQjs7QUFFQUMsTUE3QmdCLGlCQTZCVkMsSUE3QlUsRUE2QkpDLElBN0JJLEVBNkJFQyxFQTdCRixFQTZCTTtBQUNyQixTQUFPLENBQUNELE9BQU9ELElBQVIsS0FBaUIsSUFBSUUsRUFBckIsQ0FBUDtBQUNBLEVBL0JlO0FBaUNoQkMsWUFqQ2dCLHVCQWlDSkMsS0FqQ0ksRUFpQ0dDLEtBakNILEVBaUNVQyxhQWpDVixFQWlDeUJDLE1BakN6QixFQWlDaUNDLE1BakNqQyxFQWlDeUNOLEVBakN6QyxFQWlDNkM7QUFDNUQsTUFBTU8sS0FBSyxLQUFLVixLQUFMLENBQVdLLEtBQVgsRUFBa0JDLEtBQWxCLEVBQXlCSCxFQUF6QixDQUFYLENBRDRELENBQ3BCO0FBQ3hDLFNBQU9NLFNBQVNDLEVBQVQsR0FBY0EsRUFBZCxHQUFtQkYsU0FBU0QsYUFBbkM7QUFDQSxFQXBDZTtBQXNDaEJJLFlBdENnQix1QkFzQ0pDLFFBdENJLEVBc0NNO0FBQ3JCLFNBQU9DLEtBQUtDLElBQUwsQ0FBVUYsU0FBUyxDQUFULElBQWNBLFNBQVMsQ0FBVCxDQUFkLEdBQ1hBLFNBQVMsQ0FBVCxJQUFjQSxTQUFTLENBQVQsQ0FESCxHQUVYQSxTQUFTLENBQVQsSUFBY0EsU0FBUyxDQUFULENBRmIsQ0FBUDtBQUdBLEVBMUNlO0FBNENoQkcsSUE1Q2dCLGVBNENaQyxDQTVDWSxFQTRDVEMsQ0E1Q1MsRUE0Q047QUFDVCxNQUFJQyxLQUFLRixDQUFUO0FBQUEsTUFBWUcsS0FBS0YsQ0FBakI7O0FBRUEsU0FBT0MsTUFBTUMsRUFBYixFQUFpQjtBQUNoQixPQUFJRCxLQUFLQyxFQUFULEVBQWE7QUFDWkQsVUFBTUYsQ0FBTjtBQUNBLElBRkQsTUFFTztBQUNORyxVQUFNRixDQUFOO0FBQ0E7QUFDRDs7QUFFRCxTQUFPQyxFQUFQO0FBQ0EsRUF4RGU7QUEwRGhCRSxNQTFEZ0IsaUJBMERWQyxTQTFEVSxFQTBEQ0MsVUExREQsRUEwRGFDLFdBMURiLEVBMEQwQjtBQUN6QyxTQUFPRixZQUFZLENBQUNDLGFBQWFELFNBQWQsSUFBMkJFLFdBQTlDO0FBQ0EsRUE1RGU7QUE4RGhCQyxrQkE5RGdCLDZCQThERVosUUE5REYsRUE4RFk7QUFDM0IsU0FBTyxDQUFDQSxTQUFTLENBQVQsSUFBY0EsU0FBUyxDQUFULENBQWYsS0FBK0JBLFNBQVMsQ0FBVCxJQUFjQSxTQUFTLENBQVQsQ0FBN0MsSUFDSCxDQUFDQSxTQUFTLENBQVQsSUFBY0EsU0FBUyxDQUFULENBQWYsS0FBK0JBLFNBQVMsQ0FBVCxJQUFjQSxTQUFTLENBQVQsQ0FBN0MsQ0FERyxHQUVILENBQUNBLFNBQVMsQ0FBVCxJQUFjQSxTQUFTLENBQVQsQ0FBZixLQUErQkEsU0FBUyxDQUFULElBQWNBLFNBQVMsQ0FBVCxDQUE3QyxDQUZKO0FBR0E7QUFsRWUsQ0FBakI7O2tCQXFFZTdCLFEiLCJmaWxlIjoiZmVhdHVyZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBmZWF0dXJlcyA9IHtcblxuXHQvLz09PT09PT09PT09PT09PT09PT09PT09PSBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09Ly9cblxuXHRhY2NJbnRlbnNpdHlQYXJhbTE6IDAuOCxcblx0YWNjSW50ZW5zaXR5UGFyYW0yOiAwLjEsXG5cblx0ZnJlZWZhbGxBY2NUaHJlc2g6IDAuMTUsXG5cdGZyZWVmYWxsR3lyVGhyZXNoOiA3NTAsXG5cdGZyZWVmYWxsR3lyRGVsdGFUaHJlc2g6IDQwLFxuXG5cdGd5ckludGVuc2l0eVBhcmFtMTogMC45LFxuXHRneXJJbnRlbnNpdHlQYXJhbTI6IDEsXG5cblx0a2lja1RocmVzaDogMC4wMSxcblx0a2lja1NwZWVkR2F0ZTogMjAwLFxuXHRraWNrTWVkaWFuRmlsdGVyc2l6ZTogOSxcblxuXHRzaGFrZVRocmVzaDogMC4xLFxuXHRzaGFrZVdpbmRvd1NpemU6IDIwMCxcblx0c2hha2VTbGlkZUZhY3RvcjogMTAsXG5cblx0c3BpblRocmVzaDogMjAwLFxuXG5cdHN0aWxsVGhyZXNoOiA1MDAwLFxuXHRzdGlsbFNsaWRlRmFjdG9yOiA1LFxuXG5cdC8vPT09PT09PT09PT09PT09PT09PT09PT09IGZ1bmN0aW9ucyA9PT09PT09PT09PT09PT09PT09PT09PT0vL1xuXG5cdGRlbHRhKHByZXYsIG5leHQsIGR0KSB7XG5cdFx0cmV0dXJuIChuZXh0IC0gcHJldikgLyAoMiAqIGR0KTtcblx0fSxcblxuXHRpbnRlbnNpdHkxRChuZXh0WCwgcHJldlgsIHByZXZJbnRlbnNpdHksIHBhcmFtMSwgcGFyYW0yLCBkdCkge1xuXHRcdGNvbnN0IGR4ID0gdGhpcy5kZWx0YShuZXh0WCwgcHJldlgsIGR0KTsvLyhuZXh0WCAtIHByZXZYKSAvICgyICogZHQpO1xuXHRcdHJldHVybiBwYXJhbTIgKiBkeCAqIGR4ICsgcGFyYW0xICogcHJldkludGVuc2l0eTtcblx0fSxcblxuXHRtYWduaXR1ZGUzRCh4eXpBcnJheSkge1xuXHRcdHJldHVybiBNYXRoLnNxcnQoeHl6QXJyYXlbMF0gKiB4eXpBcnJheVswXSArIFxuXHRcdFx0XHRcdFx0XHRcdHh5ekFycmF5WzFdICogeHl6QXJyYXlbMV0gK1xuXHRcdFx0XHRcdFx0XHRcdHh5ekFycmF5WzJdICogeHl6QXJyYXlbMl0pO1xuXHR9LFxuXG5cdGxjbShhLCBiKSB7XG5cdFx0bGV0IGExID0gYSxcdGIxID0gYjtcblxuXHRcdHdoaWxlIChhMSAhPSBiMSkge1xuXHRcdFx0aWYgKGExIDwgYjEpIHtcblx0XHRcdFx0YTEgKz0gYTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGIxICs9IGI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGExO1xuXHR9LFxuXG5cdHNsaWRlKHByZXZTbGlkZSwgY3VycmVudFZhbCwgc2xpZGVGYWN0b3IpIHtcblx0XHRyZXR1cm4gcHJldlNsaWRlICsgKGN1cnJlbnRWYWwgLSBwcmV2U2xpZGUpIC8gc2xpZGVGYWN0b3I7XG5cdH0sXG5cblx0c3RpbGxDcm9zc1Byb2R1Y3QoeHl6QXJyYXkpIHtcblx0XHRyZXR1cm4gKHh5ekFycmF5WzFdIC0geHl6QXJyYXlbMl0pICogKHh5ekFycmF5WzFdIC0geHl6QXJyYXlbMl0pICtcblx0XHRcdFx0XHQgKHh5ekFycmF5WzBdIC0geHl6QXJyYXlbMV0pICogKHh5ekFycmF5WzBdIC0geHl6QXJyYXlbMV0pICtcblx0XHRcdFx0XHQgKHh5ekFycmF5WzJdIC0geHl6QXJyYXlbMF0pICogKHh5ekFycmF5WzJdIC0geHl6QXJyYXlbMF0pO1xuXHR9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmZWF0dXJlczsiXX0=